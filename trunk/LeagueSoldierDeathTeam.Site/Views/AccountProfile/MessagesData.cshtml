@using LeagueSoldierDeathTeam.BusinessLogic.Classes.Enums
@using LeagueSoldierDeathTeam.BusinessLogic.Classes.Extensions
@using LeagueSoldierDeathTeam.Site.Classes
@using LeagueSoldierDeathTeam.Site.Controllers
@model LeagueSoldierDeathTeam.Site.Models.AccountProfile.UserMessagesModel
@{
	Layout = null;
	var emptyMessages = string.Format("{0} сообщения не найдены.", EnumEx.GetDescription(Model.MessageType));
}

@if (Model.Data.Any())
{
	@Html.HiddenFor(m => m.MessageTypeId)
	@Html.HiddenFor(m => m.MessageType)
	<hr />
	<div class="messages-commands">
		<input type="hidden" id="ureadMessages" value="@Model.Data.Count(o => !o.IsRead)" />
		<span>Всего сообщений (<span data-type="message-count" class="darkred">@Model.Data.Count()</span>)</span>
		<span class="commands">
			@if (Model.MessageType == MessageTypeEnum.Inbox)
			{
				@:Отметить выбранное
				<span class="orange command" data-action="readMessages">как прочитанное</span>@:,
				<span class="green command" data-action="saveMessages">сохранить</span>
				@:или
			}
			else if (Model.MessageType == MessageTypeEnum.Sent)
			{
				@:Отмеченное
				<span class="green command" data-action="saveMessages">сохранить</span>
				@:или
			}
			else if (Model.MessageType == MessageTypeEnum.Draft)
			{
				@:Отмеченное
			}
			<span class="darkred command" data-action="deleteMessages">удалить</span>
		</span>
	</div>
	<table class="table">
		<tr>
			<th class="span5">
				<span data-action="select-unread" class="message-select message-select-unread"></span>
				<span class="message-select message-select-slash"></span>
				<span data-action="select-read" class="message-select message-select-read"></span>
			</th>
			<th class="span3">
				<span class="checker" data-action="allSelect">
					<span>
						<input type="checkbox" />
					</span>
				</span>
			</th>
			<th class="span15">
				@switch (Model.MessageType)
				{
					case MessageTypeEnum.Inbox:
					case MessageTypeEnum.Draft:
						@:Отправитель
						break;
					case MessageTypeEnum.Sent:
					@:Получатель
						break;
				}
			</th>
			<th class="span35">Сообщение</th>
			<th class="span15">Дата</th>
		</tr>
		@foreach (var item in Model.Data)
		{
			<tr>
				<td class="center">
					<span class="icons message-icon @(Html.Raw(item.IsRead ? "read-message" : "unread-message"))"></span>
				</td>
				<td class="center">
					<span class="checker">
						<span>
							<input type="checkbox" data-id="@item.Id" data-type="message" data-read="@item.IsRead" />
						</span>
					</span>
				</td>
				<td>
					@switch (Model.MessageType)
					{
						case MessageTypeEnum.Inbox:
						case MessageTypeEnum.Draft:
							if (item.SenderId.HasValue)
							{
								<a href="@(WebBuilder.BuildActionUrl<AccountProfileController>(o => o.ProfileInfo(item.SenderId.Value)))">@item.SenderName</a>
							}
							else
							{
								@:Пользователь удален
							}
							break;
						case MessageTypeEnum.Sent:
							if (item.RecipientId.HasValue)
							{
								<a href="@(WebBuilder.BuildActionUrl<AccountProfileController>(o => o.ProfileInfo(item.RecipientId.Value)))">@item.RecipientName</a>
							}
							else
							{
								@:Пользователь удален
							}
							break;
					}
				</td>
				<td>
					<a href="@(WebBuilder.BuildActionUrl<AccountProfileController>(o => o.ViewMessage(item.Id)))">@item.Title</a>
				</td>
				<td class="center message-date">@item.CreateDate.ToString("d MMMM yyyy HH:mm")</td>
			</tr>
		}
	</table>
}
else
{
	<div class="no-result">@emptyMessages</div>
}
