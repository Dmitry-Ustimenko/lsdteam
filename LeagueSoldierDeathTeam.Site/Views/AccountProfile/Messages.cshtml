@using LeagueSoldierDeathTeam.BusinessLogic.Classes.Enums
@using LeagueSoldierDeathTeam.Site.Classes
@using LeagueSoldierDeathTeam.Site.Controllers
@model LeagueSoldierDeathTeam.Site.Models.AccountProfile.UserMessagesModel
@{
	ViewBag.Title = "Личные сообщения";
	var currentUser = AppContext.Current.CurrentUser;
}

<div class="transparent-border">
	<div class="simple-page-body section-shadow">
		<div class="section-module-header">
			<div class="module-title">@ViewBag.Title</div>
		</div>
		<div class="section-module-body">
			<div class="messages">
				<div id="form">
					@using (Html.BeginForm())
					{
						<div class="messages-header">
							<span class="message-types">
								@Html.DropDownListFor(m => m.MessageTypeId, new SelectList(Model.MessageTypes, "Key", "Value"))
							</span>
							<span class="message-write-link">
								<a class="button" href="@(WebBuilder.BuildActionUrl<AccountProfileController>(o => o.CreateMessage()))">Новое сообщение</a>
							</span>
						</div>
					}
				</div>
				<div id="content" class="messages-body">
					@{ Html.RenderAction("MessagesData", Model); }
				</div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(document).ready(function () {
		site.messages.init({
			urls: {
				saveAsRead: '@(WebBuilder.BuildActionUrl<AccountProfileController>(m => m.SaveMessageAsRead((int)MessageTypeEnum.Inbox, null)))',
				saveAsDraft: '@(WebBuilder.BuildActionUrl<AccountProfileController>(m => m.SaveMessageAsDraft((int)MessageTypeEnum.Inbox, null)))',
				deleteMessages: '@(WebBuilder.BuildActionUrl<AccountProfileController>(m => m.DeleteMessage((int)MessageTypeEnum.Inbox, null)))',
				refreshGrid: '@(WebBuilder.BuildActionUrl<AccountProfileController>(m => m.MessagesData(null)))'
			}
		});
	});
</script>