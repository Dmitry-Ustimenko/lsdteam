@using LeagueSoldierDeathTeam.Business.Classes.Enums
@using LeagueSoldierDeathTeam.Site.Classes
@using LeagueSoldierDeathTeam.Site.Controllers
@model LeagueSoldierDeathTeam.Site.Models.Administration.AdministrationModel

@{
	ViewBag.Title = "Администрирование сайта";
}

<div class="transparent-border">
	<div class="simple-page-body section-shadow">
		<div class="section-module-header">
			<div class="module-title">Администрирование сайта</div>
		</div>
		<div class="section-module-body">
			<div id="tabs">
				<ul>
					<li><a href="#users">Пользователи</a></li>
					<li><a href="#role-management">Менеджер ролей</a></li>
				</ul>
				<div id="users">
					<h2>Пользователи</h2>
					<div class="filter">
						<div class="sort">
							Сортировка:
							<div class="sort-changeable">
								<span data-val="@SortEnum.Default" class="sort-name">по умолчанию</span>
								<ul class="sort-dropdown">
									<li data-val="@SortEnum.Default" data-type="name">по умолчанию</li>
									<li data-val="@SortEnum.Name" data-type="name">по имени</li>
									<li data-val="@SortEnum.Email" data-type="email">по email</li>
									<li data-val="@SortEnum.Actived" data-type="active">по активным</li>
									<li data-val="@SortEnum.Banned" data-type="banned">по забаненным</li>
								</ul>
							</div>
						</div>
						<span class="search">
							<input type="text" placeholder="Найти пользователя">
							<span class="search-btn"></span>
						</span>
						<span class="clear-btn"></span>
					</div>
					<div id="usersContent">
						@{ Html.RenderAction("UsersData", Model.UsersModel); }
					</div>
				</div>
				<div id="role-management">
					<h2>Менеджер ролей</h2>
					<div class="filter">
						<div class="sort-role">
							Отобразить:
							<div class="sort-role-changeable">
								<span data-val="@RoleEnum.None" class="sort-role-name">всех</span>
								<ul class="sort-role-dropdown">
									<li data-val="@RoleEnum.None" data-type="name">всех</li>
									@if (AppContext.Current.CurrentUser.IsMainAdmin)
									{
										<li data-val="@RoleEnum.Administrator" data-type="name">администраторов</li>
									}
									<li data-val="@RoleEnum.Moderator" data-type="name">модераторов</li>
									<li data-val="@RoleEnum.User" data-type="email">пользователей</li>
								</ul>
							</div>
						</div>
						<span class="role-search">
							<input type="text" placeholder="Найти пользователя">
							<span class="role-search-btn"></span>
						</span>
						<span class="role-clear-btn"></span>
					</div>
					<div id="roleContent">
						@{ Html.RenderAction("UserRolesData", Model.UserRolesModel); }
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(document).ready(function () {
		site.administation.init({
			urls: {
				changeRole: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.ChangeRole(null, null, null)))',
				deleteUser: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.DeleteUser(null, null)))',
				activateUser: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.ActivateUser(null, null)))',
				banUser: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.BanUser(null, null, null)))',
				sendMessageForActivate: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.SendMessageForActivate(null, null)))',
				loginAs: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.LoginAs(null)))',
				refreshUsersGrid: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.UsersData(null)))',
				refreshUserRolesGrid: '@(WebBuilder.BuildActionUrl<AdministrationController>(m => m.UserRolesData(null)))'
			}
		});
	});
</script>